@model WorkSchedule.Models.Person

@{ViewBag.Title = "Create a new";
    ViewBag.Title = "Edition";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edition</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.PersonId)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Login, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Login, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Login, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-4" for="DictDepartmentID">Department</label>
        <div class="col-md-10">
            @Html.DropDownList("DictDepartmentID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DictDepartmentID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-4" for="DictTeamID">Team</label>
        <div class="col-md-10">

            @Html.DropDownListFor(model => model.DictTeamID, null, "", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DictTeamID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FormOfEmployment, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FormOfEmployment, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FormOfEmployment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TypeOfEmployment, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TypeOfEmployment, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TypeOfEmployment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-4" for="DictDepartmentID">Job title</label>
        <div class="col-md-10">
            @Html.DropDownList("DictJobTitleID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DictJobTitleID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <label class="control-label col-md-4" for="DictDepartmentID">Skill</label>
        <div class="col-md-10">
            @Html.DropDownList("DictSkillID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DictSkillID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        Is active (unchecking hides all entries)
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.active)
                @Html.ValidationMessageFor(model => model.active, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        Date of termination of cooperation (hides entries after this date)
        <div class="col-md-10">
            @Html.EditorFor(model => model.DateTo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DateTo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to the list", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    var FormOfEmploymentTags = [
        "Mother co",
        "Xyz",
        "Other"
    ];

    var TypeOfEmploymentTags = [
        "0,25",
        "0,5",
        "0,75",
        "1"
    ];

    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }

    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }

    $('#Login').keyup(function () {

        if (this.value.indexOf('DOMAIN\\') !== 0) {

            this.value = 'DOMAIN\\' + this.value;
        }

    });

    $(document).ready(function () {

        $('#FormOfEmployment').autocomplete({
            source: FormOfEmploymentTags,
            minLength: 0,
            open: function () {
                $('#FormOfEmployment').removeClass('input-validation-error');
            },
            change: function (event, ui) {
                if (!ui.item) {
                    $('#FormOfEmployment').addClass('input-validation-error');
                }
            }
        }).focus(function () {
            $(this).data("uiAutocomplete").search($(this).val());
        });

        $('#TypeOfEmployment').autocomplete({
            source: TypeOfEmploymentTags,
            minLength: 0,
            open: function () {
                $('#TypeOfEmployment').removeClass('input-validation-error');
            },
            change: function (event, ui) {
                if (!ui.item) {
                    $('#TypeOfEmployment').addClass('input-validation-error');
                }
            }
        }).focus(function () {
            $(this).data("uiAutocomplete").search($(this).val());
        });

    });
</script>

}
